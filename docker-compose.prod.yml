services:
  traefik:
    image: traefik:latest
    container_name: traefik-oracle
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
    command:
      - "--log.level=DEBUG"
      - "--accessLog=true"
      - "--providers.docker=true"
      - "--providers.docker.network=oracle-network"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=0.0.0.0:80"
      - "--entryPoints.websecure.address=0.0.0.0:443"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.web.transport.respondingTimeouts.readTimeout=120s"
      - "--entryPoints.web.transport.respondingTimeouts.writeTimeout=120s"
      - "--entryPoints.web.transport.respondingTimeouts.idleTimeout=180s"
      - "--entryPoints.websecure.transport.respondingTimeouts.readTimeout=120s"
      - "--entryPoints.websecure.transport.respondingTimeouts.writeTimeout=120s"
      - "--entryPoints.websecure.transport.respondingTimeouts.idleTimeout=180s"
      - "--certificatesresolvers.myresolver.acme.email=lmaumau22@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/data/acme.json"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
    networks:
      - oracle-network

  backend:
    build: ./backend
    container_name: oracle-backend
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - GUNICORN_CMD_ARGS=--timeout 120 --workers 3
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=oracle_user
      - DB_PASSWORD=oracle_pass
      - DB_NAME=oracle_visits
    depends_on:
      - db
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:5000/api/geometry/icosahedron/initial",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "app=oracle-backend"
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`quantum-oracle-entropie.duckdns.org`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web,websecure"
      - "traefik.http.services.backend.loadbalancer.server.port=5000"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
    networks:
      - oracle-network
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: oracle-frontend
    ports:
      - "8080:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "app=oracle-frontend"
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`quantum-oracle-entropie.duckdns.org`)"
      - "traefik.http.routers.frontend.entrypoints=web,websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    networks:
      - oracle-network
    restart: unless-stopped

  db:
    image: postgres:13
    container_name: oracle-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: oracle_user
      POSTGRES_PASSWORD: oracle_pass
      POSTGRES_DB: oracle_visits
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - oracle-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "oracle_user", "-d", "oracle_visits"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: minio-storage
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_pass
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - oracle-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - oracle-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`quantum-oracle-entropie.duckdns.org`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.entrypoints=web,websecure"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=myresolver"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    networks:
      - oracle-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`quantum-oracle-entropie.duckdns.org`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=web,websecure"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"

volumes:
  db_data:
    name: oracle-db-data
  minio_data:
    name: minio-storage-data
  traefik_data:
    name: traefik-data
  prometheus_data:
    name: prometheus-data
  grafana_data:
    name: grafana-data

networks:
  oracle-network:
    driver: bridge
